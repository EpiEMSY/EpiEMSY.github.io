#ifndef MECANICS_H
#define MECANICS_H

#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <err.h>
#include <string.h>
#include <unistd.h>

#define TRUE 1
#define FALSE 0

#define APPLE 0
#define PEACH 1
#define ORANGE 2
#define PEER 3

// Special fruit
#define SF 4

// Explode an entire line
#define FLine 5
// Explode an entire column
#define FColumn 6

#define EMPTY -1

#define WIDTH 8

#define HEIGHT 8

#define NBMOVE 5

#define START 1
#define GAME 0

#define KNRM  "\x1B[0m"

extern unsigned long score;
extern unsigned long nbf[7];
extern unsigned long bestscore;

/*static char *flist = {"APPLE", "ORANGE", "PEER", "PEACH", "SF", "FL", "FC"};
static char *clist = {"\x1B[31m", "\x1B[33m", "\x1B[32m", "\x1B[35m", "\x1B[36m",
	"\x1B[34m", KNRM};*/


extern char *flist[7];
extern char *clist[7];

void print_matrix(int matrix[HEIGHT][WIDTH]);

// put random int in the grid
void generategrid(int matrix[HEIGHT][WIDTH]);

// cond = TRUE, random int are put in the grid
// cond = FALSE, no random, cases are EMPTY
// make fruits fall in a column
void fruitsfall(int matrix[HEIGHT][WIDTH], size_t column, int cond);

void swap(int matrix[HEIGHT][WIDTH], size_t l1, size_t c1, size_t l2, size_t c2);

// cond = TRUE, random int are put in the grid
// cond = FALSE, no random, cases are EMPTY
void destroy(int matrix[HEIGHT][WIDTH], int cond);

// rando = TRUE, random int are put in the grid
// rando = FALSE, no random, cases are EMPTY
void destroyline(int matrix[HEIGHT][WIDTH], size_t line, int rando);

// rando = TRUE, random int are put in the grid
// rando = FALSE, no random, cases are EMPTY
void destroycolumn(int matrix[HEIGHT][WIDTH], size_t column, int rando);


// rando = TRUE, random int are put in the grid
// rando = FALSE, no random, cases are EMPTY
// check around the fruit in matrix[l][c] (called after a move)
// return TRUE if line or column of 3 minimum formed and do the change
// else return FALSE
int checkaround(int matrix[HEIGHT][WIDTH], size_t l, size_t c, int condition, int rando);

// rando = TRUE, random int are put in the grid
// rando = FALSE, no random, cases are EMPTY
// explode every "type" fruit
void transSF(int matrix[HEIGHT][WIDTH], int type, int rando);

// rando = TRUE, random int are put in the grid
// rando = FALSE, no random, cases are EMPTY
// use this function when 2 fruits are selected
// swap the 2 selected fruits
// compare these 2 fruits
// if the cmd is invalid, the 2 fruits selected go to their initial position
void cmd(int matrix[HEIGHT][WIDTH], size_t l1, size_t c1, size_t l2, size_t c2, int rando);

// rando = TRUE, random int are put in the grid
// rando = FALSE, no random, cases are EMPTY
// called when a new grid is generated by generategrid
// or when a line or column or special fruit or column or lien fruit is exploded
// return 1 if the grid has changed
// return Â° if the grid has not changed
// replace de fruits exploded, update the score and call the function
// "fruitsfall"
int checkgrid(int matrix[HEIGHT][WIDTH], int condition, int rando);

#endif
